{
  "address": "0xD5ac451B0c50B9476107823Af206eD814a2e2580",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLBACK_SUCCESS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploymentChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "depositToAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrower",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x25492e3b11505014dbec0238d059c31093b3daf6ecc27f5b9a709e92dccabc5c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xD5ac451B0c50B9476107823Af206eD814a2e2580",
    "transactionIndex": 0,
    "gasUsed": "1835168",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9130a64d4fd318bfe697ba71f5c0526990a84f39861f75a3520e2a834f8ca3b5",
    "transactionHash": "0x25492e3b11505014dbec0238d059c31093b3daf6ecc27f5b9a709e92dccabc5c",
    "logs": [],
    "blockNumber": 1046575,
    "cumulativeGasUsed": "1835168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8633b2d940dff39d9f0bc82edfe9534a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositToAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Wrapped GAS v10 (WGAS10) is an GAS  ERC-20 wrapper. You can `deposit` GAS and obtain a WGAS10 balance which can then be operated as an ERC-20 token. You can `withdraw` GAS from WGAS10, which will then burn WGAS10 token in your wallet. The amount of WGAS10 token in any wallet is always identical to the balance of GAS deposited minus the GAS withdrawn with that specific wallet.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return the DOMAIN_SEPARATOR.\"},\"approve(address,uint256)\":{\"details\":\"Sets `value` as allowance of `spender` account over caller account's WGAS10 token. Emits {Approval} event. Returns boolean value indicating whether operation succeeded.\"},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets `value` as allowance of `spender` account over caller account's WGAS10 token, after which a call is executed to an ERC677-compliant contract with the `data` parameter. Emits {Approval} event. Returns boolean value indicating whether operation succeeded. For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\"},\"deposit()\":{\"details\":\"`msg.value` of GAS sent to this contract grants caller account a matching increase in WGAS10 token balance. Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to caller account.\"},\"depositTo(address)\":{\"details\":\"`msg.value` of GAS sent to this contract grants `to` account a matching increase in WGAS10 token balance. Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to `to` account.\"},\"depositToAndCall(address,bytes)\":{\"details\":\"`msg.value` of GAS sent to this contract grants `to` account a matching increase in WGAS10 token balance, after which a call is executed to an ERC677-compliant contract with the `data` parameter. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\"},\"flashFee(address,uint256)\":{\"details\":\"Return the fee (zero) for flash lending an amount of WGAS10 token.\"},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Flash lends `value` WGAS10 token to the receiver address. By the end of the transaction, `value` WGAS10 token will be burned from the receiver. The flash-minted WGAS10 token is not backed by real GAS, but can be withdrawn as such up to the GAS balance of this contract. Arbitrary data can be passed as a bytes calldata parameter. Emits {Approval} event to reflect reduced allowance `value` for this contract to spend from receiver account (`receiver`), unless allowance is set to `type(uint256).max` Emits two {Transfer} events for minting and burning of the flash-minted amount. Returns boolean value indicating whether operation succeeded. Requirements:   - `value` must be less or equal to type(uint112).max.   - The total of all flash loans in a tx must be less or equal to type(uint112).max.\"},\"maxFlashLoan(address)\":{\"details\":\"Return the amount of WGAS10 token that can be flash-lent.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as allowance of `spender` account over `owner` account's WGAS10 token, given `owner` account's signed approval. Emits {Approval} event. Requirements:   - `deadline` must be timestamp in future.   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.   - the signature must use `owner` account's current nonce (see {nonces}).   - the signer cannot be `address(0)` and must be `owner` account. For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. WGAS10 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\"},\"totalSupply()\":{\"details\":\"Returns the total supply of WGAS10 token as the GAS held in this contract.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `value` WGAS10 token from caller's account to account (`to`). A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WGAS10 token.\"},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves `value` WGAS10 token from caller's account to account (`to`), after which a call is executed to an ERC677-compliant contract with the `data` parameter. A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WGAS10 token. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `value` WGAS10 token from account (`from`) to account (`to`) using allowance mechanism. `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`. A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller. Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - `from` account must have at least `value` balance of WGAS10 token.   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account.\"},\"withdraw(uint256)\":{\"details\":\"Burn `value` WGAS10 token from caller account and withdraw matching GAS to the same. Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WGAS10 token.\"},\"withdrawFrom(address,address,uint256)\":{\"details\":\"Burn `value` WGAS10 token from account (`from`) and withdraw matching GAS to account (`to`). Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from account (`from`). Requirements:   - `from` account must have at least `value` balance of WGAS10 token.   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account.\"},\"withdrawTo(address,uint256)\":{\"details\":\"Burn `value` WGAS10 token from caller account and withdraw matching ETH to account (`to`). Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WGAS10 token.\"}},\"stateVariables\":{\"allowance\":{\"details\":\"Records number of WGAS10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}.\"},\"balanceOf\":{\"details\":\"Records amount of WGAS10 token owned by account.\"},\"flashMinted\":{\"details\":\"Current amount of flash-minted WGAS10 token.\"},\"nonces\":{\"details\":\"Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}. Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/WGAS10.sol\":\"WGAS10\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2612.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IERC2612 is IERC20Permit {}\\n\",\"keccak256\":\"0x0f24eaf53b9f5945eb84c2c41d09ae94e22cb1ae566f9351f7395296869f6ffc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1224de3b68ef525ed94328c7c0f6aef24f79bf2170591c4214def4f1fd40bca5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d9159aa6c1a0d8006fb152b0aee46a0f9b8938575ede1a0d7e186b3bc79c8d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"contracts/mock/WGAS10.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IWGAS10.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\n\\ninterface ITransferReceiver {\\n    function onTokenTransfer(address, uint, bytes calldata) external returns (bool);\\n}\\n\\ninterface IApprovalReceiver {\\n    function onTokenApproval(address, uint, bytes calldata) external returns (bool);\\n}\\n\\n/// @dev Wrapped GAS v10 (WGAS10) is an GAS  ERC-20 wrapper. You can `deposit` GAS and obtain a WGAS10 balance which can then be operated as an ERC-20 token. You can\\n/// `withdraw` GAS from WGAS10, which will then burn WGAS10 token in your wallet. The amount of WGAS10 token in any wallet is always identical to the\\n/// balance of GAS deposited minus the GAS withdrawn with that specific wallet.\\ncontract WGAS10 is IWGAS10 {\\n\\n    string public constant name = \\\"Wrapped GAS v10\\\";\\n    string public constant symbol = \\\"WGAS10\\\";\\n    uint8  public constant decimals = 18;\\n\\n    bytes32 public immutable CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    uint256 public immutable deploymentChainId;\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n\\n    /// @dev Records amount of WGAS10 token owned by account.\\n    mapping (address => uint256) public override balanceOf;\\n\\n    /// @dev Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}.\\n    /// Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\\n    mapping (address => uint256) public override nonces;\\n\\n    /// @dev Records number of WGAS10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}.\\n    mapping (address => mapping (address => uint256)) public override allowance;\\n\\n    /// @dev Current amount of flash-minted WGAS10 token.\\n    uint256 public override flashMinted;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {chainId := chainid()}\\n        deploymentChainId = chainId;\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR.\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        uint256 chainId;\\n        assembly {chainId := chainid()}\\n        return chainId == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Returns the total supply of WGAS10 token as the GAS held in this contract.\\n    function totalSupply() external view override returns (uint256) {\\n        return address(this).balance + flashMinted;\\n    }\\n\\n    /// @dev Fallback, `msg.value` of GAS sent to this contract grants caller account a matching increase in WGAS10 token balance.\\n    /// Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to caller account.\\n    receive() external payable {\\n        // _mintTo(msg.sender, msg.value);\\n        balanceOf[msg.sender] += msg.value;\\n        emit Transfer(address(0), msg.sender, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of GAS sent to this contract grants caller account a matching increase in WGAS10 token balance.\\n    /// Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to caller account.\\n    function deposit() external override payable {\\n        // _mintTo(msg.sender, msg.value);\\n        balanceOf[msg.sender] += msg.value;\\n        emit Transfer(address(0), msg.sender, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of GAS sent to this contract grants `to` account a matching increase in WGAS10 token balance.\\n    /// Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to `to` account.\\n    function depositTo(address to) external override payable {\\n        // _mintTo(to, msg.value);\\n        balanceOf[to] += msg.value;\\n        emit Transfer(address(0), to, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of GAS sent to this contract grants `to` account a matching increase in WGAS10 token balance,\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function depositToAndCall(address to, bytes calldata data) external override payable returns (bool success) {\\n        // _mintTo(to, msg.value);\\n        balanceOf[to] += msg.value;\\n        emit Transfer(address(0), to, msg.value);\\n\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, msg.value, data);\\n    }\\n\\n    /// @dev Return the amount of WGAS10 token that can be flash-lent.\\n    function maxFlashLoan(address token) external view override returns (uint256) {\\n        return token == address(this) ? type(uint112).max - flashMinted : 0; // Can't underflow\\n    }\\n\\n    /// @dev Return the fee (zero) for flash lending an amount of WGAS10 token.\\n    function flashFee(address token, uint256) external view override returns (uint256) {\\n        require(token == address(this), \\\"WGAS: flash mint only WGAS10\\\");\\n        return 0;\\n    }\\n\\n    /// @dev Flash lends `value` WGAS10 token to the receiver address.\\n    /// By the end of the transaction, `value` WGAS10 token will be burned from the receiver.\\n    /// The flash-minted WGAS10 token is not backed by real GAS, but can be withdrawn as such up to the GAS balance of this contract.\\n    /// Arbitrary data can be passed as a bytes calldata parameter.\\n    /// Emits {Approval} event to reflect reduced allowance `value` for this contract to spend from receiver account (`receiver`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits two {Transfer} events for minting and burning of the flash-minted amount.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - `value` must be less or equal to type(uint112).max.\\n    ///   - The total of all flash loans in a tx must be less or equal to type(uint112).max.\\n    function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data) external override returns (bool) {\\n        require(token == address(this), \\\"WGAS: flash mint only WGAS10\\\");\\n        require(value <= type(uint112).max, \\\"WGAS: individual loan limit exceeded\\\");\\n        flashMinted = flashMinted + value;\\n        require(flashMinted <= type(uint112).max, \\\"WGAS: total loan limit exceeded\\\");\\n\\n        // _mintTo(address(receiver), value);\\n        balanceOf[address(receiver)] += value;\\n        emit Transfer(address(0), address(receiver), value);\\n\\n        require(\\n            receiver.onFlashLoan(msg.sender, address(this), value, 0, data) == CALLBACK_SUCCESS,\\n            \\\"WGAS: flash loan failed\\\"\\n        );\\n\\n        // _decreaseAllowance(address(receiver), address(this), value);\\n        uint256 allowed = allowance[address(receiver)][address(this)];\\n        if (allowed != type(uint256).max) {\\n            require(allowed >= value, \\\"WGAS: request exceeds allowance\\\");\\n            uint256 reduced = allowed - value;\\n            allowance[address(receiver)][address(this)] = reduced;\\n            emit Approval(address(receiver), address(this), reduced);\\n        }\\n\\n        // _burnFrom(address(receiver), value);\\n        uint256 balance = balanceOf[address(receiver)];\\n        require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n        balanceOf[address(receiver)] = balance - value;\\n        emit Transfer(address(receiver), address(0), value);\\n\\n        flashMinted = flashMinted - value;\\n        return true;\\n    }\\n\\n    /// @dev Burn `value` WGAS10 token from caller account and withdraw matching GAS to the same.\\n    /// Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WGAS10 token.\\n    function withdraw(uint256 value) external override {\\n        // _burnFrom(msg.sender, value);\\n        uint256 balance = balanceOf[msg.sender];\\n        require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n        balanceOf[msg.sender] = balance - value;\\n        emit Transfer(msg.sender, address(0), value);\\n\\n        // _transferEther(msg.sender, value);\\n        (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n        require(success, \\\"WGAS: GAS transfer failed\\\");\\n    }\\n\\n    /// @dev Burn `value` WGAS10 token from caller account and withdraw matching ETH to account (`to`).\\n    /// Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WGAS10 token.\\n    function withdrawTo(address payable to, uint256 value) external override {\\n        // _burnFrom(msg.sender, value);\\n        uint256 balance = balanceOf[msg.sender];\\n        require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n        balanceOf[msg.sender] = balance - value;\\n        emit Transfer(msg.sender, address(0), value);\\n\\n        // _transferEther(to, value);\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"WGAS: GAS transfer failed\\\");\\n    }\\n\\n    /// @dev Burn `value` WGAS10 token from account (`from`) and withdraw matching GAS to account (`to`).\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from account (`from`).\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WGAS10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account.\\n    function withdrawFrom(address from, address payable to, uint256 value) external override {\\n        if (from != msg.sender) {\\n            // _decreaseAllowance(from, msg.sender, value);\\n            uint256 allowed = allowance[from][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                require(allowed >= value, \\\"WGAS: request exceeds allowance\\\");\\n                uint256 reduced = allowed - value;\\n                allowance[from][msg.sender] = reduced;\\n                emit Approval(from, msg.sender, reduced);\\n            }\\n        }\\n\\n        // _burnFrom(from, value);\\n        uint256 balance = balanceOf[from];\\n        require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n        balanceOf[from] = balance - value;\\n        emit Transfer(from, address(0), value);\\n\\n        // _transferEther(to, value);\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"WGAS: GAS transfer failed\\\");\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WGAS10 token.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        // _approve(msg.sender, spender, value);\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WGAS10 token,\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external override returns (bool) {\\n        // _approve(msg.sender, spender, value);\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n\\n        return IApprovalReceiver(spender).onTokenApproval(msg.sender, value, data);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over `owner` account's WGAS10 token, given `owner` account's signed approval.\\n    /// Emits {Approval} event.\\n    /// Requirements:\\n    ///   - `deadline` must be timestamp in future.\\n    ///   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.\\n    ///   - the signature must use `owner` account's current nonce (see {nonces}).\\n    ///   - the signer cannot be `address(0)` and must be `owner` account.\\n    /// For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\\n    /// WGAS10 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(block.timestamp <= deadline, \\\"WGAS: Expired permit\\\");\\n\\n        uint256 chainId;\\n        assembly {chainId := chainid()}\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                nonces[owner]++,\\n                deadline));\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                chainId == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId),\\n                hashStruct));\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0) && signer == owner, \\\"WGAS: invalid permit\\\");\\n\\n        // _approve(owner, spender, value);\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @dev Moves `value` WGAS10 token from caller's account to account (`to`).\\n    /// A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WGAS10 token.\\n    function transfer(address to, uint256 value) external override returns (bool) {\\n        // _transferFrom(msg.sender, to, value);\\n        if (to != address(0) && to != address(this)) { // Transfer\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WGAS: transfer amount exceeds balance\\\");\\n\\n            balanceOf[msg.sender] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(msg.sender, to, value);\\n        } else { // Withdraw\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n            balanceOf[msg.sender] = balance - value;\\n            emit Transfer(msg.sender, address(0), value);\\n\\n            (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n            require(success, \\\"WGAS: GAS transfer failed\\\");\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Moves `value` WGAS10 token from account (`from`) to account (`to`) using allowance mechanism.\\n    /// `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`.\\n    /// A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller.\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WGAS10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account.\\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\\n        if (from != msg.sender) {\\n            // _decreaseAllowance(from, msg.sender, value);\\n            uint256 allowed = allowance[from][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                require(allowed >= value, \\\"WGAS: request exceeds allowance\\\");\\n                uint256 reduced = allowed - value;\\n                allowance[from][msg.sender] = reduced;\\n                emit Approval(from, msg.sender, reduced);\\n            }\\n        }\\n\\n        // _transferFrom(from, to, value);\\n        if (to != address(0) && to != address(this)) { // Transfer\\n            uint256 balance = balanceOf[from];\\n            require(balance >= value, \\\"WGAS: transfer amount exceeds balance\\\");\\n\\n            balanceOf[from] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(from, to, value);\\n        } else { // Withdraw\\n            uint256 balance = balanceOf[from];\\n            require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n            balanceOf[from] = balance - value;\\n            emit Transfer(from, address(0), value);\\n\\n            (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n            require(success, \\\"WGAS: GAS transfer failed\\\");\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Moves `value` WGAS10 token from caller's account to account (`to`),\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WGAS10 token.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(address to, uint value, bytes calldata data) external override returns (bool) {\\n        // _transferFrom(msg.sender, to, value);\\n        if (to != address(0)) { // Transfer\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WGAS: transfer amount exceeds balance\\\");\\n\\n            balanceOf[msg.sender] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(msg.sender, to, value);\\n        } else { // Withdraw\\n            uint256 balance = balanceOf[msg.sender];\\n            require(balance >= value, \\\"WGAS: burn amount exceeds balance\\\");\\n            balanceOf[msg.sender] = balance - value;\\n            emit Transfer(msg.sender, address(0), value);\\n\\n            (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n            require(success, \\\"WGAS: GAS transfer failed\\\");\\n        }\\n\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, value, data);\\n    }\\n\\n    // @dev mint tokens to an account\\n    // @param account the account to mint to\\n    // @param amount the amount of tokens to mint\\n    function mint(address account, uint256 amount) external {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            balanceOf[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5266b26be8fbbcf2830f0016196202bdb62648a522c896b9e5e6cfe847337585\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/IWGAS10.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2021\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2612.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\\\";\\n\\n/// @dev Wrapped Ether v10 (WGAS10) is an Ether (ETH) ERC-20 wrapper. You can `deposit` ETH and obtain a WGAS10 balance which can then be operated as an ERC-20 token. You can\\n/// `withdraw` ETH from WGAS10, which will then burn WGAS10 token in your wallet. The amount of WGAS10 token in any wallet is always identical to the\\n/// balance of ETH deposited minus the ETH withdrawn with that specific wallet.\\ninterface IWGAS10 is IERC20, IERC2612, IERC3156FlashLender {\\n\\n    /// @dev Returns current amount of flash-minted WGAS10 token.\\n    function flashMinted() external view returns(uint256);\\n\\n    /// @dev `msg.value` of ETH sent to this contract grants caller account a matching increase in WGAS10 token balance.\\n    /// Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to caller account.\\n    function deposit() external payable;\\n\\n    /// @dev `msg.value` of ETH sent to this contract grants `to` account a matching increase in WGAS10 token balance.\\n    /// Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to `to` account.\\n    function depositTo(address to) external payable;\\n\\n    /// @dev Burn `value` WGAS10 token from caller account and withdraw matching ETH to the same.\\n    /// Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account. \\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WGAS10 token.\\n    function withdraw(uint256 value) external;\\n\\n    /// @dev Burn `value` WGAS10 token from caller account and withdraw matching ETH to account (`to`).\\n    /// Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WGAS10 token.\\n    function withdrawTo(address payable to, uint256 value) external;\\n\\n    /// @dev Burn `value` WGAS10 token from account (`from`) and withdraw matching ETH to account (`to`).\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from account (`from`).\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WGAS10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account.\\n    function withdrawFrom(address from, address payable to, uint256 value) external;\\n\\n    /// @dev `msg.value` of ETH sent to this contract grants `to` account a matching increase in WGAS10 token balance,\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function depositToAndCall(address to, bytes calldata data) external payable returns (bool);\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WGAS10 token,\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /// @dev Moves `value` WGAS10 token from caller's account to account (`to`), \\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// A transfer to `address(0)` triggers an ETH withdraw matching the sent WGAS10 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WGAS10 token.\\n    /// For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(address to, uint value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4a68b8ad799e7938e7a4326f875fd02308bdf69026b089a5ab5ef7c4e3a62678\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101006040527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd96080527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960a05234801561005957600080fd5b504660c0818152604080518082018252600f81526e057726170706564204741532076313608c1b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527ffce1b694715e12430d9fb4c36387c0cb47d715752be5367f46cb31db02df0992818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018590523060a080830191909152835180830390910181529301909152815191012060e0525060805160a05160c05160e05161202c61019160003960008181610ab201526117af01526000818161050501528181610a7d015261177a0152600081816102b901526116f20152600081816104160152610edd015261202c6000f3fe60806040526004361061014b5760003560e01c806306fdde03146101a1578063095ea7b3146101f257806318160ddd14610222578063205c28781461024557806323b872dd146102675780632e1a7d4d1461028757806330adf81f146102a7578063313ce567146102db5780633644e515146103025780634000aea01461031757806340c10f19146103375780635cffe9de146103575780635ddb7d7e14610377578063613255ab1461038a57806370a08231146103aa5780637ecebe00146103d75780638237e538146104045780638b28d32f146104385780639555a9421461044e57806395d89b411461046e578063a9059cbb146104a0578063b760faf9146104c0578063cae9ca51146104d3578063cd0d0096146104f3578063d0e30db014610527578063d505accf1461052f578063d9d98ce41461054f578063dd62ed3e1461056f57600080fd5b3661019c57336000908152602081905260408120805434929061016f908490611a4b565b90915550506040513481523390600090600080516020611fb78339815191529060200160405180910390a3005b600080fd5b3480156101ad57600080fd5b506101dc6040518060400160405280600f81526020016e057726170706564204741532076313608c1b81525081565b6040516101e99190611a5e565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611ac4565b6105a7565b60405190151581526020016101e9565b34801561022e57600080fd5b50610237610602565b6040519081526020016101e9565b34801561025157600080fd5b50610265610260366004611ac4565b610617565b005b34801561027357600080fd5b50610212610282366004611af0565b610707565b34801561029357600080fd5b506102656102a2366004611b31565b61099d565b3480156102b357600080fd5b506102377f000000000000000000000000000000000000000000000000000000000000000081565b3480156102e757600080fd5b506102f0601281565b60405160ff90911681526020016101e9565b34801561030e57600080fd5b50610237610a78565b34801561032357600080fd5b50610212610332366004611b92565b610ad8565b34801561034357600080fd5b50610265610352366004611ac4565b610ce6565b34801561036357600080fd5b50610212610372366004611bed565b610d7c565b610212610385366004611c5f565b6110f6565b34801561039657600080fd5b506102376103a5366004611cb3565b6111d1565b3480156103b657600080fd5b506102376103c5366004611cb3565b60006020819052908152604090205481565b3480156103e357600080fd5b506102376103f2366004611cb3565b60016020526000908152604090205481565b34801561041057600080fd5b506102377f000000000000000000000000000000000000000000000000000000000000000081565b34801561044457600080fd5b5061023760035481565b34801561045a57600080fd5b50610265610469366004611af0565b6111fe565b34801561047a57600080fd5b506101dc6040518060400160405280600681526020016505747415331360d41b81525081565b3480156104ac57600080fd5b506102126104bb366004611ac4565b6113b0565b6102656104ce366004611cb3565b611560565b3480156104df57600080fd5b506102126104ee366004611b92565b6115bf565b3480156104ff57600080fd5b506102377f000000000000000000000000000000000000000000000000000000000000000081565b610265611640565b34801561053b57600080fd5b5061026561054a366004611cd7565b61168c565b34801561055b57600080fd5b5061023761056a366004611ac4565b61192a565b34801561057b57600080fd5b5061023761058a366004611d4e565b600260209081526000928352604080842090915290825290205481565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020611fd7833981519152906105f09086815260200190565b60405180910390a35060015b92915050565b6000600354476106129190611a4b565b905090565b33600090815260208190526040902054818110156106505760405162461bcd60e51b815260040161064790611d87565b60405180910390fd5b61065a8282611dc8565b336000818152602081815260408083209490945592518581529092600080516020611fb7833981519152910160405180910390a36000836001600160a01b03168360405160006040518083038185875af1925050503d80600081146106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b50509050806107015760405162461bcd60e51b815260040161064790611ddb565b50505050565b60006001600160a01b03841633146107c1576001600160a01b038416600090815260026020908152604080832033845290915290205460001981146107bf57828110156107665760405162461bcd60e51b815260040161064790611e0e565b60006107728483611dc8565b6001600160a01b03871660008181526002602090815260408083203380855290835292819020859055518481529394509092600080516020611fd7833981519152910160405180910390a3505b505b6001600160a01b038316158015906107e257506001600160a01b0383163014155b156108a8576001600160a01b038416600090815260208190526040902054828110156108205760405162461bcd60e51b815260040161064790611e45565b61082a8382611dc8565b6001600160a01b038087166000908152602081905260408082209390935590861681529081208054859290610860908490611a4b565b92505081905550836001600160a01b0316856001600160a01b0316600080516020611fb78339815191528560405161089a91815260200190565b60405180910390a350610993565b6001600160a01b038416600090815260208190526040902054828110156108e15760405162461bcd60e51b815260040161064790611d87565b6108eb8382611dc8565b6001600160a01b0386166000818152602081815260408083209490945592518681529092600080516020611fb7833981519152910160405180910390a3604051600090339085908381818185875af1925050503d806000811461096a576040519150601f19603f3d011682016040523d82523d6000602084013e61096f565b606091505b50509050806109905760405162461bcd60e51b815260040161064790611ddb565b50505b5060019392505050565b33600090815260208190526040902054818110156109cd5760405162461bcd60e51b815260040161064790611d87565b6109d78282611dc8565b336000818152602081815260408083209490945592518581529092600080516020611fb7833981519152910160405180910390a3604051600090339084908381818185875af1925050503d8060008114610a4d576040519150601f19603f3d011682016040523d82523d6000602084013e610a52565b606091505b5050905080610a735760405162461bcd60e51b815260040161064790611ddb565b505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610ab057610aab8161195d565b610ad2565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60006001600160a01b03851615610b8f573360009081526020819052604090205484811015610b195760405162461bcd60e51b815260040161064790611e45565b610b238582611dc8565b33600090815260208190526040808220929092556001600160a01b03881681529081208054879290610b56908490611a4b565b90915550506040518581526001600160a01b038716903390600080516020611fb78339815191529060200160405180910390a350610c68565b3360009081526020819052604090205484811015610bbf5760405162461bcd60e51b815260040161064790611d87565b610bc98582611dc8565b336000818152602081815260408083209490945592518881529092600080516020611fb7833981519152910160405180910390a3604051600090339087908381818185875af1925050503d8060008114610c3f576040519150601f19603f3d011682016040523d82523d6000602084013e610c44565b606091505b5050905080610c655760405162461bcd60e51b815260040161064790611ddb565b50505b604051635260769b60e11b81526001600160a01b0386169063a4c0ed3690610c9a903390889088908890600401611eb3565b6020604051808303816000875af1158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190611ee5565b95945050505050565b6001600160a01b038216610d3c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610647565b6001600160a01b03821660008181526020818152604080832080548601905551848152600080516020611fb7833981519152910160405180910390a35050565b60006001600160a01b0385163014610da65760405162461bcd60e51b815260040161064790611f07565b6001600160701b03841115610e095760405162461bcd60e51b8152602060048201526024808201527f574741533a20696e646976696475616c206c6f616e206c696d697420657863656044820152631959195960e21b6064820152608401610647565b83600354610e179190611a4b565b60038190556001600160701b031015610e725760405162461bcd60e51b815260206004820152601f60248201527f574741533a20746f74616c206c6f616e206c696d6974206578636565646564006044820152606401610647565b6001600160a01b03861660009081526020819052604081208054869290610e9a908490611a4b565b90915550506040518481526001600160a01b03871690600090600080516020611fb78339815191529060200160405180910390a36040516323e30c8b60e01b81527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038816906323e30c8b90610f2790339030908a906000908b908b90600401611f3d565b6020604051808303816000875af1158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a9190611f84565b14610fb15760405162461bcd60e51b815260206004820152601760248201527615d1d054ce88199b185cda081b1bd85b8819985a5b1959604a1b6044820152606401610647565b6001600160a01b038616600090815260026020908152604080832030845290915290205460001981146110575784811015610ffe5760405162461bcd60e51b815260040161064790611e0e565b600061100a8683611dc8565b6001600160a01b03891660008181526002602090815260408083203080855290835292819020859055518481529394509092600080516020611fd7833981519152910160405180910390a3505b6001600160a01b038716600090815260208190526040902054858110156110905760405162461bcd60e51b815260040161064790611d87565b61109a8682611dc8565b6001600160a01b0389166000818152602081815260408083209490945592518981529092600080516020611fb7833981519152910160405180910390a3856003546110e59190611dc8565b600355506001979650505050505050565b6001600160a01b038316600090815260208190526040812080543491908390611120908490611a4b565b90915550506040513481526001600160a01b03851690600090600080516020611fb78339815191529060200160405180910390a3604051635260769b60e11b81526001600160a01b0385169063a4c0ed3690611186903390349088908890600401611eb3565b6020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190611ee5565b949350505050565b60006001600160a01b03821630146111ea5760006105fc565b6003546105fc906001600160701b03611dc8565b6001600160a01b03831633146112b6576001600160a01b038316600090815260026020908152604080832033845290915290205460001981146112b4578181101561125b5760405162461bcd60e51b815260040161064790611e0e565b60006112678383611dc8565b6001600160a01b03861660008181526002602090815260408083203380855290835292819020859055518481529394509092600080516020611fd7833981519152910160405180910390a3505b505b6001600160a01b038316600090815260208190526040902054818110156112ef5760405162461bcd60e51b815260040161064790611d87565b6112f98282611dc8565b6001600160a01b0385166000818152602081815260408083209490945592518581529092600080516020611fb7833981519152910160405180910390a36000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b50509050806113a95760405162461bcd60e51b815260040161064790611ddb565b5050505050565b60006001600160a01b038316158015906113d357506001600160a01b0383163014155b1561147e5733600090815260208190526040902054828110156114085760405162461bcd60e51b815260040161064790611e45565b6114128382611dc8565b33600090815260208190526040808220929092556001600160a01b03861681529081208054859290611445908490611a4b565b90915550506040518381526001600160a01b038516903390600080516020611fb78339815191529060200160405180910390a350611557565b33600090815260208190526040902054828110156114ae5760405162461bcd60e51b815260040161064790611d87565b6114b88382611dc8565b336000818152602081815260408083209490945592518681529092600080516020611fb7833981519152910160405180910390a3604051600090339085908381818185875af1925050503d806000811461152e576040519150601f19603f3d011682016040523d82523d6000602084013e611533565b606091505b50509050806115545760405162461bcd60e51b815260040161064790611ddb565b50505b50600192915050565b6001600160a01b03811660009081526020819052604081208054349290611588908490611a4b565b90915550506040513481526001600160a01b03821690600090600080516020611fb78339815191529060200160405180910390a350565b3360008181526002602090815260408083206001600160a01b03891680855292528083208790555191929091600080516020611fd7833981519152906116089088815260200190565b60405180910390a360405162ba451f60e01b81526001600160a01b0386169062ba451f90610c9a903390889088908890600401611eb3565b336000908152602081905260408120805434929061165f908490611a4b565b90915550506040513481523390600090600080516020611fb78339815191529060200160405180910390a3565b834211156116d35760405162461bcd60e51b815260206004820152601460248201527315d1d054ce88115e1c1a5c9959081c195c9b5a5d60621b6044820152606401610647565b6001600160a01b038716600090815260016020526040812080544692917f0000000000000000000000000000000000000000000000000000000000000000918b918b918b918661172283611f9d565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120905060007f000000000000000000000000000000000000000000000000000000000000000083146117ad576117a88361195d565b6117cf565b7f00000000000000000000000000000000000000000000000000000000000000005b60405161190160f01b602082015260228101919091526042810183905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa15801561185a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061189057508a6001600160a01b0316816001600160a01b0316145b6118d35760405162461bcd60e51b815260206004820152601460248201527315d1d054ce881a5b9d985b1a59081c195c9b5a5d60621b6044820152606401610647565b6001600160a01b038b81166000818152600260209081526040808320948f16808452948252918290208d905590518c8152600080516020611fd7833981519152910160405180910390a35050505050505050505050565b60006001600160a01b03831630146119545760405162461bcd60e51b815260040161064790611f07565b50600092915050565b604080518082018252600f81526e057726170706564204741532076313608c1b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527ffce1b694715e12430d9fb4c36387c0cb47d715752be5367f46cb31db02df0992818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101939093523060a0808501919091528251808503909101815260c0909301909152815191012090565b634e487b7160e01b600052601160045260246000fd5b808201808211156105fc576105fc611a35565b602081526000825180602084015260005b81811015611a8c5760208186018101516040868401015201611a6f565b506000604082850101526040601f19601f83011684010191505092915050565b6001600160a01b0381168114611ac157600080fd5b50565b60008060408385031215611ad757600080fd5b8235611ae281611aac565b946020939093013593505050565b600080600060608486031215611b0557600080fd5b8335611b1081611aac565b92506020840135611b2081611aac565b929592945050506040919091013590565b600060208284031215611b4357600080fd5b5035919050565b60008083601f840112611b5c57600080fd5b5081356001600160401b03811115611b7357600080fd5b602083019150836020828501011115611b8b57600080fd5b9250929050565b60008060008060608587031215611ba857600080fd5b8435611bb381611aac565b93506020850135925060408501356001600160401b03811115611bd557600080fd5b611be187828801611b4a565b95989497509550505050565b600080600080600060808688031215611c0557600080fd5b8535611c1081611aac565b94506020860135611c2081611aac565b93506040860135925060608601356001600160401b03811115611c4257600080fd5b611c4e88828901611b4a565b969995985093965092949392505050565b600080600060408486031215611c7457600080fd5b8335611c7f81611aac565b925060208401356001600160401b03811115611c9a57600080fd5b611ca686828701611b4a565b9497909650939450505050565b600060208284031215611cc557600080fd5b8135611cd081611aac565b9392505050565b600080600080600080600060e0888a031215611cf257600080fd5b8735611cfd81611aac565b96506020880135611d0d81611aac565b95506040880135945060608801359350608088013560ff81168114611d3157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611d6157600080fd5b8235611d6c81611aac565b91506020830135611d7c81611aac565b809150509250929050565b60208082526021908201527f574741533a206275726e20616d6f756e7420657863656564732062616c616e636040820152606560f81b606082015260800190565b818103818111156105fc576105fc611a35565b60208082526019908201527815d1d054ce8811d054c81d1c985b9cd9995c8819985a5b1959603a1b604082015260600190565b6020808252601f908201527f574741533a2072657175657374206578636565647320616c6c6f77616e636500604082015260600190565b60208082526025908201527f574741533a207472616e7366657220616d6f756e7420657863656564732062616040820152646c616e636560d81b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000611edb606083018486611e8a565b9695505050505050565b600060208284031215611ef757600080fd5b81518015158114611cd057600080fd5b6020808252601c908201527b0574741533a20666c617368206d696e74206f6e6c79205747415331360241b604082015260600190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a060808201819052600090611f789083018486611e8a565b98975050505050505050565b600060208284031215611f9657600080fd5b5051919050565b600060018201611faf57611faf611a35565b506001019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a26469706673582212205e63a33485bf237cae56e527618af431a664a5593c7b4d57ca51af7ef78731c664736f6c634300081a0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Wrapped GAS v10 (WGAS10) is an GAS  ERC-20 wrapper. You can `deposit` GAS and obtain a WGAS10 balance which can then be operated as an ERC-20 token. You can `withdraw` GAS from WGAS10, which will then burn WGAS10 token in your wallet. The amount of WGAS10 token in any wallet is always identical to the balance of GAS deposited minus the GAS withdrawn with that specific wallet.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return the DOMAIN_SEPARATOR."
      },
      "approve(address,uint256)": {
        "details": "Sets `value` as allowance of `spender` account over caller account's WGAS10 token. Emits {Approval} event. Returns boolean value indicating whether operation succeeded."
      },
      "approveAndCall(address,uint256,bytes)": {
        "details": "Sets `value` as allowance of `spender` account over caller account's WGAS10 token, after which a call is executed to an ERC677-compliant contract with the `data` parameter. Emits {Approval} event. Returns boolean value indicating whether operation succeeded. For more information on {approveAndCall} format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "deposit()": {
        "details": "`msg.value` of GAS sent to this contract grants caller account a matching increase in WGAS10 token balance. Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to caller account."
      },
      "depositTo(address)": {
        "details": "`msg.value` of GAS sent to this contract grants `to` account a matching increase in WGAS10 token balance. Emits {Transfer} event to reflect WGAS10 token mint of `msg.value` from `address(0)` to `to` account."
      },
      "depositToAndCall(address,bytes)": {
        "details": "`msg.value` of GAS sent to this contract grants `to` account a matching increase in WGAS10 token balance, after which a call is executed to an ERC677-compliant contract with the `data` parameter. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "flashFee(address,uint256)": {
        "details": "Return the fee (zero) for flash lending an amount of WGAS10 token."
      },
      "flashLoan(address,address,uint256,bytes)": {
        "details": "Flash lends `value` WGAS10 token to the receiver address. By the end of the transaction, `value` WGAS10 token will be burned from the receiver. The flash-minted WGAS10 token is not backed by real GAS, but can be withdrawn as such up to the GAS balance of this contract. Arbitrary data can be passed as a bytes calldata parameter. Emits {Approval} event to reflect reduced allowance `value` for this contract to spend from receiver account (`receiver`), unless allowance is set to `type(uint256).max` Emits two {Transfer} events for minting and burning of the flash-minted amount. Returns boolean value indicating whether operation succeeded. Requirements:   - `value` must be less or equal to type(uint112).max.   - The total of all flash loans in a tx must be less or equal to type(uint112).max."
      },
      "maxFlashLoan(address)": {
        "details": "Return the amount of WGAS10 token that can be flash-lent."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as allowance of `spender` account over `owner` account's WGAS10 token, given `owner` account's signed approval. Emits {Approval} event. Requirements:   - `deadline` must be timestamp in future.   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.   - the signature must use `owner` account's current nonce (see {nonces}).   - the signer cannot be `address(0)` and must be `owner` account. For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. WGAS10 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol."
      },
      "totalSupply()": {
        "details": "Returns the total supply of WGAS10 token as the GAS held in this contract."
      },
      "transfer(address,uint256)": {
        "details": "Moves `value` WGAS10 token from caller's account to account (`to`). A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WGAS10 token."
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "Moves `value` WGAS10 token from caller's account to account (`to`), after which a call is executed to an ERC677-compliant contract with the `data` parameter. A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller. Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - caller account must have at least `value` WGAS10 token. For more information on {transferAndCall} format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `value` WGAS10 token from account (`from`) to account (`to`) using allowance mechanism. `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`. A transfer to `address(0)` triggers an GAS withdraw matching the sent WGAS10 token in favor of caller. Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event. Returns boolean value indicating whether operation succeeded. Requirements:   - `from` account must have at least `value` balance of WGAS10 token.   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account."
      },
      "withdraw(uint256)": {
        "details": "Burn `value` WGAS10 token from caller account and withdraw matching GAS to the same. Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WGAS10 token."
      },
      "withdrawFrom(address,address,uint256)": {
        "details": "Burn `value` WGAS10 token from account (`from`) and withdraw matching GAS to account (`to`). Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from account (`from`). Requirements:   - `from` account must have at least `value` balance of WGAS10 token.   - `from` account must have approved caller to spend at least `value` of WGAS10 token, unless `from` and caller are the same account."
      },
      "withdrawTo(address,uint256)": {
        "details": "Burn `value` WGAS10 token from caller account and withdraw matching ETH to account (`to`). Emits {Transfer} event to reflect WGAS10 token burn of `value` to `address(0)` from caller account. Requirements:   - caller account must have at least `value` balance of WGAS10 token."
      }
    },
    "stateVariables": {
      "allowance": {
        "details": "Records number of WGAS10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}."
      },
      "balanceOf": {
        "details": "Records amount of WGAS10 token owned by account."
      },
      "flashMinted": {
        "details": "Current amount of flash-minted WGAS10 token."
      },
      "nonces": {
        "details": "Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}. Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40195,
        "contract": "contracts/mock/WGAS10.sol:WGAS10",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40201,
        "contract": "contracts/mock/WGAS10.sol:WGAS10",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40209,
        "contract": "contracts/mock/WGAS10.sol:WGAS10",
        "label": "allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 40213,
        "contract": "contracts/mock/WGAS10.sol:WGAS10",
        "label": "flashMinted",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}